! function() {
"use strict";
var e = function(e, t, a) {
this.width = e, this.height = t, this.root = new THREE.Object3D, this.root.matrixAutoUpdate = !1, this.markerNFTwidth = 0, this.markerNFTheigth = 0, this.markerNFTdpi = 0, this.obj = {}, this.config = a
};
e.prototype.init = function(e, n) {
this.cameraPara;
var i = this.root;
(async function(e, t) {
return await new Promise((function(t, a) {
const n = new XMLHttpRequest;
n.open("GET", e), n.responseType = "json", n.onload = function() {
t(n.response)
}, n.onerror = function() {
a("error " + n.status)
}, n.send(null)
}))
})(this.config).then((function(o) {
! function(e) {
var t = document.createElement("div");
t.id = "loading";
var a = document.createElement("img");
a.src = e.loading.logo.src, a.alt = e.loading.logo.alt;
var n = document.createElement("span");
n.setAttribute("class", "loading-text"), n.innerText = e.loading.loadingMessage, t.appendChild(a), t.appendChild(n);
document.getElementById("marker");
document.body.insertBefore(t, document.body.firstChild)
}(o),
function(e) {
if(e) {
var t = document.createElement("div");
t.id = "stats", t.className = "ui stats";
var a = document.createElement("div");
a.id = "stats1", a.className = "stats-item";
var n = document.createElement("p");
n.className = "stats-item-title", n.innerText = "Main", a.appendChild(n), t.appendChild(a);
var i = document.createElement("div");
i.id = "stats2", i.className = "stats-item";
var o = document.createElement("p");
o.className = "stats-item-title", o.innerText = "Worker", i.appendChild(o), t.appendChild(i);
var r = document.getElementById("loading");
document.body.insertBefore(t, r)
}
}(n);
var r = function() {
var e = document.createElement("div");
e.id = "app";
var t = document.createElement("canvas");
t.id = "canvas";
var a = document.createElement("video");
a.id = "video", a.setAttribute("autoplay", ""), a.setAttribute("muted", ""), a.setAttribute("playsinline", ""), e.appendChild(a), e.appendChild(t);
var n = document.getElementById("loading");
return document.body.insertBefore(e, n), {
container: e,
canvas: t,
video: a
}
}(),
d = (r.container, r.canvas),
s = r.video;
if(n) {
var l = new Stats;
l.showPanel(0), document.getElementById("stats1").appendChild(l.dom);
var c = new Stats;
c.showPanel(0), document.getElementById("stats2").appendChild(c.dom)
}
if(navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
var m = {
audio: !1,
video: !0
};
window.innerWidth < 800 && (m = {
audio: !1,
video: {
width: {
ideal: this.width
},
height: {
ideal: this.height
},
facingMode: {
exact: "environment"
}
}
}), navigator.mediaDevices.getUserMedia(m).then((function(r) {
s.srcObject = r, s.addEventListener("loadedmetadata", (function() {
s.play(),
function(e, n, i, o, r, d, s, l, c, m) {
var u, p, v, h, g, f, w, y, E, x, k, T, b, M = document.createElement("canvas"),
N = M.getContext("2d"),
R = new THREE.WebGLRenderer({
canvas: d,
alpha: m.renderer.alpha,
antialias: m.renderer.antialias,
precision: m.renderer.precision
});
R.setPixelRatio(window.devicePixelRatio);
var C = new THREE.Scene,
S = new THREE.Camera;
S.matrixAutoUpdate = !1, C.add(S);
var A = new THREE.AmbientLight(16777215);
C.add(A), C.add(c);
var L;

function H() {
self.onmessage = function(n) {
var i = n.data;
switch (i.type) {
case "load":
return void
function(e) {
var n = self.origin;
console.log("base path:", n);
var i = n + "/" + e.artoolkitUrl;
importScripts(i), self.addEventListener("artoolkitNFT-loaded", (function() {
var i = n + "/" + e.camera_para,
o = new ARCameraParamNFT(i);
o.onload = function() {
var i = (t = new ARControllerNFT(e.pw, e.ph, o)).getCameraMatrix();
t.addEventListener("getNFTMarker", (function(e) {
a = {
type: "found",
matrixGL_RH: JSON.stringify(e.data.matrixGL_RH),
width: JSON.stringify(e.data.marker.width),
height: JSON.stringify(e.data.marker.height),
dpi: JSON.stringify(e.data.marker.dpi),
proj: JSON.stringify(i)
}
}));
var r = n + "/" + e.marker;
t.loadNFTMarker(r, (function(e) {
t.trackNFTMarkerId(e, 2), console.log("loadNFTMarker -> ", e), postMessage({
type: "endLoading",
end: !0
})
})), postMessage({
type: "loaded",
proj: JSON.stringify(i)
})
}
}))
}(i);
case "process":
return e = i.imagedata, void
function() {
a = null, t && t.process(e);
a ? postMessage(a) : postMessage({
type: "not found"
});
e = null
}()
}
};
var e = null,
t = null,
a = null
}
var F = function(e) {
L = e ? JSON.parse(e.matrixGL_RH) : null
},
j = Date.now();

function O() {
N.fillStyle = "black", N.fillRect(0, 0, E, x), N.drawImage(i, 0, 0, u, p, k, T, w, y);
var e = N.getImageData(0, 0, E, x);
b.postMessage({
type: "process",
imagedata: e
}, [e.data.buffer])
}
var P = function() {
U(), requestAnimationFrame(P)
},
U = function() {
s();
var e = Date.now();
if(e - j, j = e, L) {
c.visible = !0;
for(var n = 0; n < 16; n++) t.delta[n] = L[n] - t.interpolated[n], t.interpolated[n] = t.interpolated[n] + t.delta[n] / 24;
a(c.matrix, t.interpolated)
} else c.visible = !1;
R.render(C, S)
};
(function() {
u = o, p = r, g = 320 / Math.max(u, p / 3 * 4), f = /Android|mobile|iPad|iPhone/i.test(navigator.userAgent) ? window.outerWidth / o : 1, v = u * f, h = p * f, w = u * g, y = p * g, E = Math.max(w, y / 3 * 4), x = Math.max(y, w / 4 * 3), k = (E - w) / 2, T = (x - y) / 2, M.style.clientWidth = E + "px", M.style.clientHeight = x + "px", M.width = E, M.height = x, R.setSize(v, h);
var e = new Blob([H.toString().replace(/^function .+\{?|\}$/g, "")], {
type: "text/js-worker"
}),
t = URL.createObjectURL(e);
(b = new Worker(t)).postMessage({
type: "load",
pw: E,
ph: x,
camera_para: m.cameraPara,
marker: n,
artoolkitUrl: m.artoolkitUrl
}), b.onmessage = function(e) {
var t = e.data;
switch (t.type) {
case "loaded":
var n = JSON.parse(t.proj),
i = E / w,
o = x / y;
n[0] *= i, n[4] *= i, n[8] *= i, n[12] *= i, n[1] *= o, n[5] *= o, n[9] *= o, n[13] *= o, a(S.projectionMatrix, n);
break;
case "endLoading":
if(1 == t.end) {
var r = document.getElementById("loading");
r && (r.querySelector(".loading-text").innerText = "Start the tracking!", setTimeout((function() {
r.parentElement.removeChild(r)
}), 2e3))
}
break;
case "found":
F(t);
break;
case "not found":
F(null)
}
l(), O()
}
})(), P(), O()
}(0, e, s, s.videoWidth, s.videoHeight, d, (function() {
n && l.update()
}), (function() {
n && c.update()
}), i, o)
}))
})).catch((function(e) {
console.log(e.name + ": " + e.message)
}))
}
}))
}, e.prototype.add = function(e) {
var t = this.root;
console.log("obj inside add", e), t.matrixAutoUpdate = !1, t.add(e)
}, e.prototype.loadModel = function(e, t, a, n, i) {
var o, r = this.root;
(new THREE.GLTFLoader).load(e, (function(e) {
(o = e.scene).scale.set(i, i, i), o.rotation.x = Math.PI / 2, o.position.x = t, o.position.y = a, o.position.z = n, o.matrixAutoUpdate = !1, r.add(o)
}))
};
var t = {
delta: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
interpolated: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
},
a = function(e, t) {
var a = [];
for(var n in t) a[n] = t[n];
"function" == typeof e.elements.set ? e.elements.set(a) : e.elements = [].slice.call(a)
};
window.ARnft = e, window.THREE = THREE
}();
