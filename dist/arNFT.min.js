! function() {
"use strict";
var e = function(e, t, a) {
this.width = e, this.height = t, this.root = new THREE.Object3D, this.root.matrixAutoUpdate = !1, this.config = a, this.listeners = {}, this.version = "0.3.0", console.log("ARnft ", this.version)
};
e.prototype.init = function(i, n) {
console.log("ARnft init() %cstart...", "color: yellow; background-color: blue; border-radius: 4px; padding: 2px");
this.cameraPara;
var o = this.root;
(async function(e, t) {
return await new Promise((function(t, a) {
const i = new XMLHttpRequest;
i.open("GET", e), i.responseType = "json", i.onload = function() {
t(i.response)
}, i.onerror = function() {
a("error " + i.status)
}, i.send(null)
}))
})(this.config).then((function(r) {
! function(e) {
var t = document.createElement("div");
t.id = "loading";
var a = document.createElement("img");
a.src = e.loading.logo.src, a.alt = e.loading.logo.alt;
var i = document.createElement("span");
i.setAttribute("class", "loading-text"), i.innerText = e.loading.loadingMessage, t.appendChild(a), t.appendChild(i);
document.getElementById("marker");
document.body.insertBefore(t, document.body.firstChild)
}(r),
function(e) {
if(e) {
var t = document.createElement("div");
t.id = "stats", t.className = "ui stats";
var a = document.createElement("div");
a.id = "stats1", a.className = "stats-item";
var i = document.createElement("p");
i.className = "stats-item-title", i.innerText = "Main", a.appendChild(i), t.appendChild(a);
var n = document.createElement("div");
n.id = "stats2", n.className = "stats-item";
var o = document.createElement("p");
o.className = "stats-item-title", o.innerText = "Worker", n.appendChild(o), t.appendChild(n);
var r = document.getElementById("loading");
document.body.insertBefore(t, r)
}
}(n);
var d, s, c = function() {
var e = document.createElement("div");
e.id = "app";
var t = document.createElement("canvas");
t.id = "canvas";
var a = document.createElement("video");
a.id = "video", a.setAttribute("autoplay", ""), a.setAttribute("muted", ""), a.setAttribute("playsinline", ""), e.appendChild(a), e.appendChild(t);
var i = document.getElementById("loading");
return document.body.insertBefore(e, i), {
container: e,
canvas: t,
video: a
}
}(),
l = (c.container, c.canvas),
m = c.video;
n && ((d = new Stats).showPanel(0), document.getElementById("stats1").appendChild(d.dom), (s = new Stats).showPanel(0), document.getElementById("stats2").appendChild(s.dom)),
function(i, n, o, r, d, s, c) {
var l = c.videoSettings.facingMode || "environment",
m = c.onError || function(e) {
console.error("ARnft internal getUserMedia", e)
},
u = !1,
g = ["touchstart", "touchend", "touchmove", "touchcancel", "click", "mousedown", "mouseup", "mousemove", "keydown", "keyup", "keypress", "scroll"],
v = function() {
u && (o.play().then((function() {
! function(e, i, n, o, r, d, s, c, l, m) {
var u, g, v, h, p, f, w, y, E, b, k, x, M, S = document.createElement("canvas"),
P = S.getContext("2d"),
T = new THREE.WebGLRenderer({
canvas: d,
alpha: m.renderer.alpha,
antialias: m.renderer.antialias,
precision: m.renderer.precision
});
T.setPixelRatio(window.devicePixelRatio);
var U = new THREE.Scene,
R = new THREE.Camera;
R.matrixAutoUpdate = !1, U.add(R);
var A = new THREE.AmbientLight(16777215);
U.add(A), U.add(l);
var L;

function N() {
self.onmessage = function(i) {
var n = i.data;
switch (n.type) {
case "load":
return void
function(e) {
var i, n, o, r = self.origin;
console.debug("Base path:", r);
var d = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/gim.test(e.artoolkitUrl);
1 == d ? i = e.addPath ? r + "/" + e.addPath + "/" + e.artoolkitUrl : e.artoolkitUrl : 0 == d && (e.addPath ? (console.debug("addPath exist: ", e.addPath), i = r + "/" + e.addPath + "/" + e.artoolkitUrl) : i = r + "/" + e.artoolkitUrl);
console.debug("Importing WASM lib from: ", i), importScripts(i), self.addEventListener("artoolkitNFT-loaded", (function() {
var i = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/gim.test(e.camera_para);
1 == i ? n = e.addPath ? r + "/" + e.addPath + "/" + e.camera_para : e.camera_para : 0 == i && (n = e.addPath ? r + "/" + e.addPath + "/" + e.camera_para : r + "/" + e.camera_para), console.debug("Loading camera at:", n);
var d = new ARCameraParamNFT(n, (function() {
var i = (t = new ARControllerNFT(e.pw, e.ph, d)).getCameraMatrix();
t.addEventListener("getNFTMarker", (function(e) {
a = {
type: "found",
matrixGL_RH: JSON.stringify(e.data.matrixGL_RH),
proj: JSON.stringify(i)
}
}));
var n = /https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,6}\b([-a-zA-Z0-9@:%_\+.~#()?&//=]*)/gim.test(e.marker);
1 == n ? o = e.addPath ? r + "/" + e.addPath + "/" + e.marker : e.marker : 0 == n && (o = e.addPath ? r + "/" + e.addPath + "/" + e.marker : r + "/" + e.marker), console.debug("Loading NFT marker at: ", o), t.loadNFTMarker(o, (function(e) {
t.trackNFTMarkerId(e), console.log("loadNFTMarker -> ", e), postMessage({
type: "endLoading",
end: !0
})
})), postMessage({
type: "loaded",
proj: JSON.stringify(i)
})
}), (function(e) {
console.error(e)
}))
}))
}(n);
case "process":
return e = n.imagedata, void
function() {
a = null, t && t.process && t.process(e);
a ? postMessage(a) : postMessage({
type: "not found"
});
e = null
}()
}
};
var e = null,
t = null,
a = null
}
var C = function(e) {
L = e ? JSON.parse(e.matrixGL_RH) : null
},
H = Date.now();

function _() {
P.fillStyle = "black", P.fillRect(0, 0, E, b), P.drawImage(n, 0, 0, u, g, k, x, w, y);
var e = P.getImageData(0, 0, E, b);
M.postMessage({
type: "process",
imagedata: e
}, [e.data.buffer])
}
var I = function() {
j(), requestAnimationFrame(I)
},
j = function() {
s();
var e = Date.now();
if(e - H, H = e, L) {
l.visible = !0;
for(var i = 0; i < 16; i++) t.delta[i] = L[i] - t.interpolated[i], t.interpolated[i] = t.interpolated[i] + t.delta[i] / 24;
a(l.matrix, t.interpolated)
} else l.visible = !1;
T.render(U, R)
};
(function() {
u = o, g = r, p = 320 / Math.max(u, g / 3 * 4), f = /Android|mobile|iPad|iPhone/i.test(navigator.userAgent) ? window.outerWidth / o : 1, v = u * f, h = g * f, w = u * p, y = g * p, E = Math.max(w, y / 3 * 4), b = Math.max(y, w / 4 * 3), k = (E - w) / 2, x = (b - y) / 2, S.style.clientWidth = E + "px", S.style.clientHeight = b + "px", S.width = E, S.height = b, T.setSize(v, h);
var e = new Blob([N.toString().replace(/^function .+\{?|\}$/g, "")], {
type: "text/js-worker"
}),
t = URL.createObjectURL(e);
(M = new Worker(t)).postMessage({
type: "load",
pw: E,
ph: b,
camera_para: m.cameraPara,
marker: i,
artoolkitUrl: m.artoolkitUrl,
addPath: m.addPath
}), M.onmessage = function(e) {
var t = e.data;
switch (t.type) {
case "loaded":
var i = JSON.parse(t.proj),
n = E / w,
o = b / y;
i[0] *= n, i[4] *= n, i[8] *= n, i[12] *= n, i[1] *= o, i[5] *= o, i[9] *= o, i[13] *= o, a(R.projectionMatrix, i);
break;
case "endLoading":
if(1 == t.end) {
var r = document.getElementById("loading");
r && (r.querySelector(".loading-text").innerText = "Start the tracking!", setTimeout((function() {
r.parentElement.removeChild(r)
}), 2e3))
}
break;
case "found":
C(t);
break;
case "not found":
C(null)
}
c(), _()
}
})(), I(), _()
}(0, n, o, o.videoWidth, o.videoHeight, r, (function() {
s.stats && s.statsMain.update()
}), (function() {
s.stats && s.statsWorker.update()
}), d, c)
})).catch((function(t) {
m(t), e._teardownVideo(o)
})), o.paused || g.forEach((function(e) {
window.removeEventListener(e, v, !0)
})))
};
g.forEach((function(e) {
window.addEventListener(e, v, !0)
}));
var h = function(e) {
if(window.URL.createObjectURL) try {
o.srcObject = e
} catch (e) {}
o.srcObject = e, u = !0, o.autoplay = !0, o.playsInline = !0, v()
},
p = {},
f = {};
c.videoSettings.width && (f.width = c.videoSettings.width, "object" == typeof c.videoSettings.width ? (c.videoSettings.width.max && (p.maxWidth = c.videoSettings.width.max), c.videoSettings.width.min && (p.minWidth = c.videoSettings.width.min)) : p.maxWidth = c.videoSettings.width);
c.videoSettings.height && (f.height = c.videoSettings.height, "object" == typeof c.videoSettings.height ? (c.videoSettings.height.max && (p.maxHeight = c.videoSettings.height.max), c.videoSettings.height.min && (p.minHeight = c.videoSettings.height.min)) : p.maxHeight = c.videoSettings.height);
f.facingMode = l, f.deviceId = c.videoSettings.deviceId, navigator.getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia;
var w = {
audio: !1,
video: p
};
navigator.mediaDevices || window.MediaStreamTrack.getSources ? navigator.mediaDevices ? navigator.mediaDevices.getUserMedia({
audio: !1,
video: f
}).then(h, m) : window.MediaStreamTrack.getSources((function(e) {
var t = f.facingMode;
l && l.exact && (t = l.exact);
for(var a = 0; a < e.length; a++)
if("video" === e[a].kind && e[a].facing === t) {
w.video.mandatory.sourceId = e[a].id;
break
} l && l.exact && !w.video.mandatory.sourceId ? m("Failed to get camera facing the wanted direction") : navigator.getUserMedia ? navigator.getUserMedia(w, h, m) : m("navigator.getUserMedia is not supported on your browser")
})) : navigator.getUserMedia ? navigator.getUserMedia(w, h, m) : m("navigator.getUserMedia is not supported on your browser")
}(0, i, m, l, o, {
statsMain: d,
statsWorker: s,
stats: n
}, r)
}))
}, e.prototype.add = function(e) {
this.root.add(e)
}, e.prototype.loadModel = function(e, t, a, i, n) {
var o, r = this.root;
(new THREE.GLTFLoader).load(e, (function(e) {
(o = e.scene).scale.set(n, n, n), o.rotation.x = Math.PI / 2, o.position.x = t, o.position.y = a, o.position.z = i, o.matrixAutoUpdate = !1, r.add(o)
}))
}, e.prototype.dispatchEvent = function(e) {
if(e = this.listeners[event.name])
for(var t = 0; t < e.length; t++) e[t].call(this, event)
}, e.prototype.addEventListener = function(e, t) {
this.listeners[e] || (this.listeners[e] = []), this.listeners[e].push(t)
}, e.prototype.removeEventListener = function(e, t) {
if(this.listeners[e]) {
var a = this.listeners[e].indexOf(t);
a > -1 && this.listeners[e].splice(a, 1)
}
}, e._teardownVideo = function(e) {
e.srcObject.getVideoTracks()[0].stop(), e.srcObject = null, e.src = null
};
var t = {
delta: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
interpolated: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
},
a = function(e, t) {
var a = [];
for(var i in t) a[i] = t[i];
"function" == typeof e.elements.set ? e.elements.set(a) : e.elements = [].slice.call(a)
};
window.ARnft = e, window.THREE = THREE
}();
